[{"categories":["Computer and programming"],"contents":"#10 Licence-snippets   This Extensions provides the full text (for LICENCE files) as well as the recommended header text for several popular open-source licence.\nThis becomes useful when starting a new project, instead of finding the licence text online, you can have it ready by just typing on a LICENCE document the name, and the extension will insert the text.\nHere\u0026rsquo;s the list of all the available licence you can select.\n- AGPL-3.0.full - AGPL-3.0.header - Apache-2.0.full - Apache-2.0.header - Artistic-2.0.full - BSD-2-Clause.full - BSD-3-Clause.full - EPL-1.0.full - EPL-1.0.header - GPL-2.0.full - GPL-2.0.header - GPL-3.0.full - GPL-3.0.header - ISC.full - LGPL-2.1.full - LGPL-2.1.header - LGPL-3.0.full - LGPL-3.0.header - MIT.full - MPL-2.0.full This website you are currently visiting is licensed under the MIT licence, check out the licence generated by this extension\n You can also see the code of this page by clicking here  , it is open source after all\n       #11 Better TOML   TOML  aims to be a minimal configuration file format that\u0026rsquo;s easy to read due to obvious semantics. TOML is designed to map unambiguously to a hash table. TOML should be easy to parse into data structures in a wide variety of languages.\nBetter TOML is a VS Code extension to support TOML files.\nFeatures:\n Syntax Highlighting for .toml files Syntax Validation for invalid input Syntax Highlighting for markdown frontmatter   Nothing better than an extension to assist you if you\u0026rsquo;re not familiar with the syntax of something you don\u0026rsquo;t use frequently.\n       #12 Npm Intellisense   Visual Studio Code plugin that autocompletes npm modules in import statements.\nFeatures:\n Import command Scan devDependencies Show build in (local) libs Lookup package.json recursive Experimental: Package Subfolder Intellisense  Upgrade your browser to see the video.   #13 PathIntellisense   Pathintellisense uses the ts.config.compilerOptions.baseUrl as a mapping making easy and simple to autocomplete your imports\nFor example:\n{ \u0026quot;baseUrl\u0026quot;: \u0026quot;src\u0026quot;, } would allow to type:\n{ import {} from \u0026quot;src/mymodule\u0026quot;; }  Write faster code in autopilot without needing to figure out the relative path to all your folders\n Upgrade your browser to see the video.   #14 BracketPair Colorizer   This extension allows matching brackets to be identified with colours. The user can define which tokens to match, and which colours to use.\n There\u0026rsquo;s no need to strain your eyes by figuring out complex logic on nested loops.\n       #15 Vim   VSCodeVim is a Vim emulator for Visual Studio Code.\nVim requires zero introduction, bring the power of Vim to VScode, just as in your terminal.\n      #16 VScode Spell Checker   A basic spell checker that works well with camelCase code.\nThe goal of this spell checker is to help catch common spelling errors while keeping the number of false positives low.\nIt supports English as default, but you can also use an add-on of additional language dictionaries\n- Catalan - Czech - Danish - Dutch - French - French RÃ©forme 90 - German - Greek - Hebrew - Italian - Persian - Polish - Portuguese - Brazilian - Portuguese - Russian - Spanish - Swedish - Turkish - Ukrainian You can also enable it in accordance with individual file types, avoid having to make fix typo commits on your repo.\nUpgrade your browser to see the video.   #17 Dotenv   Syntax Highlighting support for Environment (.env) Files\n      #18 VScode-Arduino   The Arduino extension makes it easy to develop, build, deploy and debug your Arduino sketches in Visual Studio Code, with a rich set of functionalities. These include:\n- IntelliSense and syntax highlighting for Arduino sketches - Verify and upload your sketches in Visual Studio Code - Built-in board and library manager - Built-in example list - Built-in serial monitor - Snippets for sketches - Automatic Arduino project scaffolding - Command Palette (F1) integration of frequently used commands (e.g. Verify, Upload...) - Integrated Arduino Debugging New  In order to use this extension you must first have the Arduino IDE or Arduino CLI installed on your system\n       #19 Material Icon Theme    The best looking icon theme for your VScode. No need to code without any style or good taste\n       #20 Settings Sync   It is not only good to make a backup of your system files, it is also important to make sure you have your specific settings backed-up. If you\u0026rsquo;re moving to a new system or coding with a new computer in a new office, there\u0026rsquo;s no need to spend more than five minutes setting your environment the same way you have it back home.\n- Use your GitHub account token and Gist. - Easy to Upload and Download on one click. - Show a summary page at the end with details about config and extensions effected. - Auto download Latest Settings on Startup. - Auto upload Settings on file change. - Share the Gist with other users and let them download your settings. - Supports GitHub Enterprise - Support pragmas with @sync keywords: host, os and env are supported. - GUI for changing settings / logging in - Allows you to Sync any file across your machines.  This will sync all extensions and complete User Folder that contains the following\n - Settings File - Keybinding File - Launch File - Snippets Folder - VSCode Extensions \u0026amp; Extensions Configurations - Workspaces Folder       ","permalink":"https://absolutearray.com/articles/117-vscode-extensions-the-ultimate-guide-part-2/","tags":["IDE","Toolkit","VScode extensions","Microsoft","Licence Snippets","Better Toml","Npm Intellisense","Path Intellisense","BracketPair Colorizer","Vim","VScode Spell Checker","Dotenv","Arduino","Material Icon Theme","Settings sync"],"title":"117 Vscode Extensions - One guide to rule them all (Part 2/5)"},{"categories":["Computer and programming"],"contents":"They are many guides out there, but they are all repeating each other\nBefore you read I\u0026rsquo;ve seen a lot of guides around the web (specially those published in the Medium website  , they are usually recycling the same extensions over and over again, with the clear distinction that some of them are specific to a programming language or a certain task. I\u0026rsquo;ve decided to compile all the extensions that I have used for a task or that I find useful for anyone into a five-part series. All of these extensions will be useful to you one way or another, and are not limited to a language or task. They are good extensions that will make a lot of aspects developing a better experience.\nWithout further ado (and in no specific order of priority nor preference), here\u0026rsquo;s the ultimate VScode guide extension. You can also can click their names to navigate to their github repo.. If you want to install them, you can write the extension name on VScode extensions:marketplace\n#1 Language-x86-64-assembly   Visual Studio Code package with x86 and x86_64 assembly syntax support.\nThis is a TextMate/Sublime/VS Code/Atom bundle providing language support for x86_64 assembly language in a variety of dialects (nasm/yasm primarily, but could highlight tasm/gas to some extent).\n  Basic support for NASM/YASM/TASM/GAS syntaxes\n  Most up-to-date instruction sets:\n Legacy/undocumented registers and instructions FPU/MMX/3DNow! SSE/SSE2/(S)SSE3/SSE4/SSE4.1/SSE4.2/SSE4.a AVX/AVX2/AVX512, including pseudo-ops AES-NI/SHA VMX/SMX/NPX/SGX other AMD/Cyrix/VIA and planned future Intel extensions          #2 Better-comments   The Better Comments extension will help you create more human-friendly comments in your code. With this extension, you will be able to categorize your annotations into:\n Alerts Queries TODOs Highlights Commented out code can also be styled to make it clear the code shouldn\u0026rsquo;t be there Any other comment styles you\u0026rsquo;d like can be specified in the settings  It has a lot of supported languages:\n* Ada * AL * Apex * AsciiDoc * BrightScript * C * C# * C++ * ColdFusion * Clojure * COBOL * CoffeeScript * CSS * Dart * Dockerfile * Elixir * Elm * Erlang * F# * Fortran * gdscript * GenStat * Go * GraphQL * Groovy * Haskell * Haxe * HiveQL * HTML * Java * JavaScript * JavaScript React * JSON with comments * Julia * Kotlin * LaTex (inlc. Bibtex/Biblatex) * Less * Lisp * Lua * Makefile * Markdown * Nim * MATLAB * Objective-C * Objective-C++ * Pascal * Perl * Perl 6 * PHP * Pig * PlantUML * PL/SQL * PowerShell * Puppet * Python * R * Racket * Ruby * Rust * SAS * Sass * Scala * SCSS * ShaderLab * ShellScript * SQL * STATA * Stylus * Swift * Tcl * Terraform * Twig * TypeScript * TypeScript React * Verilog * Visual Basic * Vue.js * XML * YAML       #3 Codesnap   Take beautiful screenshots of your code in VS Code!\nFeatures  Quickly save screenshots of your code Copy screenshots to your clipboard Show line numbers Many other configuration options        #4 Snazzy plus   A VS Code theme based on hyper-snazzy and vscode-snazzy-operator.\nChanges compared to Aaron Thomas version are:\n Theming for every part of the UI. If I missed anything let me know! A darker yellow color (taken from Dracula, i think) as the pale yellow in the original didn\u0026rsquo;t appeal to me. Alternate version with italics for keywords like \u0026ldquo;this\u0026rdquo; and \u0026ldquo;class\u0026rdquo; for use with Operator/Dank Mono. Alternate darker version that I\u0026rsquo;ve started preferring on my brighter laptop screen   This is also my favorite theme for VScode, after having spent a lot of time with the Dracula theme\n       #5 Bookmarks   It helps you to navigate in your code, moving between important positions easily and quickly. No more need to search for code. It also supports a set of selection commands, which allows you to select bookmarked lines and regions between bookmarked lines. It\u0026rsquo;s really useful for log file analysis.\nHere are some of the features that Bookmarks provides:\n- Mark/unmark positions in your code - Mark positions in your code and give it name - Jump forward and backward between bookmarks - Icons in gutter and overview ruler - See a list of all Bookmarks in one file and project - Select lines and regions with bookmarks - A dedicated Side Bar Navigate your code as navigate your favorite book\nUpgrade your browser to see the video.\n   #6 Gitignore   A extension for Visual Studio Code that assists you in working with .gitignore files.\nSave precious development time by just running Ctrl+Shift+P or F1 and type Add gitignore. After that, just select the your language. Check out below how the python .gitignore looks.\n      #7 Emojisense   Adds suggestions and autocomplete for emoji to VS Code.\n Quickly insert emoji using the : emoji : syntax supported by Github and many other sites Insert emoji markup by typing :: Enable and control emoji completion settings per language See emoji previews of : emoji : style markup inline -Can be enabled in VS Code\u0026rsquo;s SCM (git) input box. -Provide an emoji picker to select and insert an emoji in the editor or terminal. To access the picker, run the Emojisense: Pick an emoji command, or use the default keybindings   Check out the list of supported emojis  \n Forget about looking up the unicode   for your emoji ever again\nUpgrade your browser to see the video.\n   #8 Sourcery   This is a great extension if you\u0026rsquo;re a python developer.\n Sourcery is your personal coding assistant that helps you write better, cleaner, Python code. It suggests refactoring on the fly to instantly improve your code.\n Sourcery runs in the background whenever you\u0026rsquo;re working on Python files. Keep an eye out for sections of your code underlined in blue - that means Sourcery has a suggestion!\nHover over a Sourcery suggestion to see a description of what Sourcery wants you to change along with the diff of the proposed changes. Then either use the quickfix menu (Ctrl+. or Cmd+. for most people) or click on the lightbulb icon to bring up the Sourcery menu and choose to accept or reject the changes.\nSourcery also provides quality metrics for every function you write (plus warnings for really bad code).\nUpgrade your browser to see the video.\n   #9 Markdown All in One   All you need for Markdown (keyboard shortcuts, table of contents, auto preview and more).\nWith this extension you will have:\n Keyboard shortcuts Table of contents List editing Print Markdown to HTML Github Flavored Markdown Math Auto completions   This is particularly useful is you\u0026rsquo;re into front-end development. This website is written using Hugo  , one of the most popular open-source static site generators, the content you are reading right now it\u0026rsquo;s written in markdown, take a look!  .\n Upgrade your browser to see the video.\n   #10 Trailing spaces   A VS Code extension that allows you to highlight trailing spaces and delete them in a flash!\nThis extension is a port of the popular Sublime Text plugin Trailing Spaces.\n VS Code provides a way to automate deletion of trailing spaces by using the Trim Trailing Whitespace command. Depending on your settings, it may be more handy to just highlight them and/or delete them by hand, at any time. This plugin provides just that, and a lot of options to fine-tune the way you want to decimate trailing spaces.\n       Thanks for reading the first part You can read Part 2 of this series here  ","permalink":"https://absolutearray.com/articles/117-vscode-extensions-the-ultimate-guide-part-1/","tags":["IDE","Learn to program","Toolkit","VScode extensions","Microsoft","x86_64-assembly-vscode","Better-comments","Codesnap","Snazzy plus","Bookmarks","Gitignore","Emojisense","Sourcery","Markdown all in one","Trailing spaces"],"title":"117 Vscode Extensions - One guide to rule them all (Part 1/5)"},{"categories":["Computer and programming"],"contents":"Sometimes the best way to install a program, is not simply downloading it.\nWhat is Pyenv? From their Github repo  .\n \u0026ldquo;pyenv lets you easily switch between multiple versions of Python. It\u0026rsquo;s simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well.\u0026rdquo;\n In simple terms, once you have pyenv installed in your computer, you will be able to have access to all the possible builds and releases of CPython, not just a single version.\nCool\u0026hellip;but why? One of the things any developer will find out when they desire to learn a new skill is that there\u0026rsquo;s a lot of ways to do one thing, but usually there\u0026rsquo;s a consensus on only one way to do it right. Naturally, many people will have disagreements, but when it comes to the ability to reproduce builds and managing time correctly, developers should be precise and leave their preferences aside.\nThe easy or the hard way If you are just starting to learn Python, you will notice there\u0026rsquo;s no such thing as python, rather there is Python2 or Python3. Please note that Python2, originally released on October 2000 reached the end of it\u0026#39;s life cycle  on April 20, 2020. I would suggest to reference knowing that it is no longer supported or currently in development, and new frameworks are also in the process of phasing it out, so there\u0026rsquo;s no point of learning it, except to understand why certain things evolved the way the are now.\nIt\u0026rsquo;s important also to understand the way Python releases are made, they follow what is call a semver versioning. Under this system, there\u0026rsquo;s a way to be specific about the changes any software release receives following the major.minor.micro convention. For example, python3.9.5 is the latest release. But there\u0026rsquo;s also python3.9.4, python3.9.3, python3.9.2 (you see where I\u0026rsquo;m going).\nThe reason tools such as pyenv exist, is to be able to grab the latest feature, performance and security release in the simplest and fastest way, rather than manually navigating to the python website  and grabbing an executable, uninstalling your current version (or having to manage both versions at the same time independently) and installing the new version.\nIn addition, pyenv let\u0026rsquo;s you:\n Let you change the global Python version on a per-user basis. Provide support for per-project Python versions. Allow you to override the Python version with an environment variable. Search commands from multiple versions of Python at a time. This may be helpful to test across Python versions with tox  .   So instead of having to manage all python installations independently, we have one tool to manage them all.\n How to install? Ubuntu/Debian/Mint\nDependencies:\n$ sudo apt-get update; sudo apt-get install make build-essential libssl-dev zlib1g-dev \\ libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \\ libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev  In case you have another distribution, please install the dependencies   Execute the following in order to use the installer script, you can read more about it here  $ curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash macOS\n$ brew update $ brew install pyenv Windows\n If you\u0026rsquo;re on Windows, consider using @kirankotari\u0026rsquo;s pyenv-win  fork. (Pyenv does not work in Windows outside the Windows Subsystem for Linux.)\n If everything completes successfully, you have now installed pyenv.\nConfiguring your shell After it has been installed, you will be required to add the following  to you shell configuration file (bash, zshrc, fish).\nSince I\u0026rsquo;m using the friendly interactive shell   (fish), I would need to execute the following code:\n$ set -Ux PYENV_ROOT $HOME/.pyenv $ set -U fish_user_paths $PYENV_ROOT/bin $fish_user_paths and add this to ~/.config/fish/config.fish:\nstatus is-login; and pyenv init --path | source Let\u0026rsquo;s try it out On your terminal go ahead and write\n$ pyenv version The output will be:\n 3.9.5 (set by ~/.pyenv/version)\n Depending on the version you have installed when reading this the version will be different.\nLet\u0026rsquo;s check out all the commands\n$ pyenv help Some useful pyenv commands are: activate Activate virtual environment commands List all available pyenv commands deactivate Deactivate virtual environment doctor Verify pyenv installation and development tools to build pythons. exec Run an executable with the selected Python version global Set or show the global Python version(s) help Display help for a command hooks List hook scripts for a given pyenv command init Configure the shell environment for pyenv install Install a Python version using python-build local Set or show the local application-specific Python version(s) prefix Display prefix for a Python version rehash Rehash pyenv shims (run this after installing executables) root Display the root directory where versions and shims are kept shell Set or show the shell-specific Python version shims List existing pyenv shims uninstall Uninstall a specific Python version --version Display the version of pyenv version Show the current Python version(s) and its origin version-file Detect the file that sets the current pyenv version version-name Show the current Python version version-origin Explain how the current Python version is set versions List all Python versions available to pyenv virtualenv Create a Python virtualenv using the pyenv-virtualenv plugin virtualenv-delete Uninstall a specific Python virtualenv virtualenv-init Configure the shell environment for pyenv-virtualenv virtualenv-prefix Display real_prefix for a Python virtualenv version virtualenvs List all Python virtualenvs found in `$PYENV_ROOT/versions/*'. whence List all Python versions that contain the given executable which Display the full path to an executable See `pyenv help \u0026lt;command\u0026gt;' for information on a specific command. For full documentation, see: https://github.com/pyenv/pyenv#readme It\u0026rsquo;s best to read all the commands so that you are familiar with pyenv, but for now let\u0026rsquo;s install python on your system.\n$ pyenv install -l This will show an extensive list of all the supported python versions, let\u0026rsquo;s look at python3.x.z\n... 3.9.0 3.9-dev 3.9.1 3.9.2 3.9.3 3.9.4 3.9.5 ... The latest version as of this article is 3.9.5, let\u0026rsquo;s go ahead and install it\n$ pyenv install 3.9.5 You can install as many versions as you want, I suggest going for the latest release, since eventually it will follow the the most up-to-date changes. With pyenv we can also specify which version we would like to run on our system, for this we need to run:\n$ pyenv global 3.9.5 This will change (or set) your systems' default version, you can confirm it by running\u0026quot;\n$ python --version You will see the following output\n Python 3.9.5\n If you want to change the global python, you can run the same command and specify which version you want to use. Pyenv also provides you the ability to specify a local version of Python per project, in case you require one specific version for any reason, you can run:\n$ pyenv local \u0026lt;version\u0026gt; Sets the local application-specific Python version(s) by writing the version name to a file named `.python-version'. When you run a Python command, pyenv will look for a \u0026quot;.python-version\u0026quot; file in the current directory and each parent directory. If no such file is found in the tree, pyenv will use the global Python version specified with \u0026quot;pyenv global\u0026quot;.  Conclusion Although they are other options to manage your Python\u0026rsquo;s version in your computer, and many arguments made in favor or against each tool (and I do encourage all developers to continue experimenting to find what fits within their toolkit), the reality is that when it comes to simplicity and time efficiency, pyenv is one of the best tools you can select and everyone should consider.\n","permalink":"https://absolutearray.com/articles/best-way-to-install-python-in-your-computer/","tags":["Computer languages","Education","Python","Pyenv","Installing python","Virtual env"],"title":"What's the best way to install Python in your computer?"}]